{"version":3,"sources":["code/helpers/translation/i18n/config.ts","assets/imgs/brazil.png","assets/imgs/united-kingdom.png","code/helpers/http/axios/axios-implementation.ts","code/data/personal/defaults/default-personal-data.ts","code/repository/index.ts","code/repository/github/personal/personal.ts","code/repository/github/core/core.ts","code/helpers/translation/i18n/notifier.ts","components/main/menu/SiteMenu.tsx","components/main/personal/Personal.tsx","components/main/Main.tsx","components/core.tsx","App.tsx","index.tsx"],"names":["resources","en","core","menu","personal","pt","i18n","use","initReactI18next","init","lng","ns","AxiosImplementation","url","axios","get","response","data","DEFAULT_PERSONAL_DATA","name","role","country","state","city","img","description","websites","linkedin","github","bitbucket","gitlab","blog","skills","languages","personalRepository","httpInterface","JSON_FILE","language","personalData","requestHandler","notifications","callable","this","push","getUrlPath","then","notify","updateData","forEach","callbackfn","BASE_URL","getLanguage","getJsonFile","languageNotifier","setLanguage","useStyles","makeStyles","position","marginTop","marginLeft","list","width","closeList","bottom","closeButton","color","SiteMenu","useState","mounted","setMounted","window","addEventListener","event","key","closeMenu","useEffect","useTranslation","t","classes","drawerState","setDrawerState","openLanguages","setOpenLanguages","toggleDrawer","open","addNotification","changeLanguage","className","Button","onClick","variant","Drawer","anchor","id","List","subheader","ListSubheader","ListItem","button","ListItemIcon","ListItemText","primary","ExpandLess","ExpandMore","Collapse","in","unmountOnExit","component","src","brazilFlag","alt","height","ukFlag","Divider","roundimage","borderRadius","presentation","textAlign","paddingTop","maxWidth","margin","website","websitesList","PersonalPresentation","style","gotoLink","link","Typography","map","value","index","Personal","loading","setState","onDataChange","formStates","CircularProgress","Main","Box","Core","document","title","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7fadce6e.chunk.js","sourcesContent":["import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport coreEn from './en/core.json';\nimport menuEn from './en/menu.json';\nimport personalEn from './en/personal.json';\n\nimport corePT from './pt-br/core.json';\nimport menuPT from './pt-br/menu.json';\nimport personalPT from './pt-br/personal.json';\n\nexport const resources = {\n    en: {\n        core: coreEn,\n        menu: menuEn,\n        personal: personalEn,\n    },\n    pt: {\n        core: corePT,\n        menu: menuPT,\n        personal: personalPT,\n    }\n} as const;\n\ni18n.use(initReactI18next).init({\n    lng: 'pt-br',\n    ns: ['core', 'menu', 'personal'],\n    resources,\n});\n","export default __webpack_public_path__ + \"static/media/brazil.b79b8fb9.png\";","export default __webpack_public_path__ + \"static/media/united-kingdom.b51cb0ae.png\";","import axios, { AxiosResponse } from 'axios';\n\nimport { HTTPInterface } from 'code/helpers/http/interface/http-interface'\n\nexport class AxiosImplementation implements HTTPInterface {\n    public async get(url: string): Promise<any> {\n        const response: AxiosResponse = await axios.get(url);\n\n        return response.data;\n    }\n}\n","import { Personal } from \"code/data/personal/interface/personal\";\n\nexport const DEFAULT_PERSONAL_DATA: Personal = {\n    name: '',\n    role: '',\n    country: '',\n    state: '',\n    city: '',\n    img: '',\n    description: '',\n    websites: {\n        personal: '',\n        linkedin: '',\n        github: '',\n        bitbucket: '',\n        gitlab: '',\n        blog: '',\n    },\n    skills: [],\n    languages: [],\n};\n","import { AxiosImplementation } from \"code/helpers/http/axios/axios-implementation\";\nimport { Personal } from \"./github/personal/personal\";\nimport { Personal as PersonalInterface } from \"./interfaces/personal/personal\";\n\nexport const personalRepository: PersonalInterface = new Personal(\n    new AxiosImplementation()\n);\n","import { Core } from 'code/repository/github/core/core';\nimport { Personal as PersonalData } from 'code/data/personal/interface/personal';\nimport { Personal as PersonalRepositoryInterface } from 'code/repository/interfaces/personal/personal';\nimport { DEFAULT_PERSONAL_DATA } from 'code/data/personal/defaults/default-personal-data';\nimport { HTTPInterface } from 'code/helpers/http/interface/http-interface';\n\nexport class Personal extends Core implements PersonalRepositoryInterface {\n    private readonly JSON_FILE: string = 'personal/personal.json';\n\n    private language: string = 'pt-br';\n\n    private personalData: PersonalData = DEFAULT_PERSONAL_DATA;\n\n    private requestHandler: HTTPInterface;\n\n    private notifications: ((data: PersonalData) => void)[] = [];\n\n    constructor (\n        httpInterface: HTTPInterface,\n    ) {\n        super();\n\n        this.requestHandler = httpInterface;\n    }\n\n    public addNotification(callable: ((data: PersonalData) => void)) {\n        this.notifications.push(callable);\n    }\n\n    public updateData(): void\n    {\n        this.requestHandler.get(\n            this.getUrlPath(),\n        ).then(\n            (data: PersonalData) => {\n                this.personalData = data;\n                this.notify();\n            },\n        )\n    }\n\n    public setLanguage(language: string): void {\n        this.language = language;\n        this.updateData();\n    }\n\n    protected getLanguage(): string {\n        return this.language;\n    }\n\n    protected getJsonFile(): string {\n        return this.JSON_FILE;\n    }\n\n    private notify(): void\n    {\n        this.notifications.forEach(\n            (callbackfn: (data: PersonalData) => void) => callbackfn(this.personalData),\n        );\n    }\n}\n","export abstract class Core {\n    private readonly BASE_URL: string = 'https://raw.githubusercontent.com/felipeAraujo/professional-data/main/';\n\n    protected getUrlPath(): string {\n        return this.BASE_URL + this.getLanguage() + '/' + this.getJsonFile();\n    }\n\n    protected abstract getLanguage(): string;\n\n    protected abstract getJsonFile(): string;\n}\n","import { personalRepository } from \"code/repository\";\n\nclass LanguageNotifier {\n    private notifications: ((data: string) => void)[] = [];\n\n    public addNotification(callable: ((language: string) => void)) {\n        this.notifications.push(callable);\n    }\n\n    public notify(language: string): void {\n        this.notifications.forEach(\n            (callbackfn: (language: string) => void) => callbackfn(language),\n        );\n        personalRepository.setLanguage(language);\n    }\n}\n\nexport const languageNotifier: LanguageNotifier = new LanguageNotifier();","import { Button, Collapse, Divider, Drawer, List, ListItem, ListItemIcon, ListItemText, ListSubheader, makeStyles } from '@material-ui/core';\n\nimport ExitToAppRoundedIcon from '@material-ui/icons/ExitToAppRounded';\nimport LanguageIcon from '@material-ui/icons/Language';\n\nimport { Dispatch, SetStateAction, useEffect, useState } from 'react';\n\nimport '../../../code/helpers/translation/i18n/config';\nimport brazilFlag from '../../../assets/imgs/brazil.png';\nimport ukFlag from '../../../assets/imgs/united-kingdom.png';\nimport { useTranslation } from 'react-i18next';\nimport { ExpandLess, ExpandMore } from '@material-ui/icons';\nimport { languageNotifier } from 'code/helpers/translation/i18n/notifier';\n\nconst useStyles: (props?: any) => Record<'menu' | 'list' | 'closeList' | 'closeButton', string>\n    = makeStyles({\n        menu: {\n            position: 'fixed',\n            marginTop: '10px',\n            marginLeft: '30px',\n        },\n        list: {\n            width: 250,\n        },\n        closeList: {\n            width: 250,\n            position: 'absolute',\n            bottom: 0,\n        },\n        closeButton: {\n            color: 'blue',\n        },\n    });\n\nexport function SiteMenu() {\n\n    const [mounted, setMounted] = useState(false)\n\n    if(!mounted){\n        window.addEventListener(\"keyup\", function(this: Window, event: KeyboardEvent): any {\n            if (event.key !== 'Escape') {\n                return;\n            }\n\n            closeMenu();\n        })\n    }\n\n    useEffect(() =>{\n      setMounted(true)\n    },[])\n\n    const { t, i18n } = useTranslation(['menu']);\n\n    const classes: Record<'menu' | 'list' | 'closeList' | 'closeButton', string> = useStyles();\n\n    const [drawerState, setDrawerState]: [boolean, Dispatch<SetStateAction<boolean>>] = useState<boolean>(false);\n\n    const [openLanguages, setOpenLanguages] = useState<boolean>(false);\n\n    languageNotifier.addNotification(onLanguageChange);\n\n    function onLanguageChange(language: string) {\n        i18n.changeLanguage(language);\n    }\n\n    function openMenu(): void {\n        toggleDrawer(true);\n    }\n\n    function closeMenu(): void {\n        toggleDrawer(false);\n    }\n\n    function toggleDrawer(open: boolean): void {\n        setDrawerState(open);\n    };\n\n    function openCloseLanguagesMenu(): void {\n        setOpenLanguages(!openLanguages);\n    }\n\n    const changeLanguage = (language: string): (() => void) => {\n        return () => {\n            languageNotifier.notify(language);\n        }\n    };\n\n    return (\n        <div className={classes.menu}>\n            <Button onClick={openMenu} variant=\"contained\" color=\"primary\">{t('menu:name')}</Button>\n            <Drawer anchor=\"left\" open={drawerState}>\n                <div\n                    className={classes.list}\n                    id=\"menuItem\"\n                    role=\"presentation\"\n                >\n                    <List subheader={<ListSubheader>Menu</ListSubheader>}>\n                        <ListItem button onClick={openCloseLanguagesMenu}>\n                            <ListItemIcon> <LanguageIcon /> </ListItemIcon>\n                            <ListItemText primary={t('menu:languages')} />\n                            {openLanguages ? <ExpandLess /> : <ExpandMore />}\n                        </ListItem>\n                        <Collapse in={openLanguages} unmountOnExit>\n                            <List component=\"div\">\n                                <ListItem button onClick={changeLanguage('pt-br')}>\n                                    <ListItemIcon>\n                                        <img src={brazilFlag} alt={t('menu:portuguese')} width=\"25\" height=\"25\"/>\n                                    </ListItemIcon>\n                                    <ListItemText primary={t('menu:portuguese')}></ListItemText>\n                                </ListItem>\n                                <ListItem button onClick={changeLanguage('en')}>\n                                    <ListItemIcon>\n                                        <img src={ukFlag} width=\"25\" alt={t('menu:english')} height=\"25\"/>\n                                    </ListItemIcon>\n                                    <ListItemText primary={t('menu:english')}></ListItemText>\n                                </ListItem>\n                            </List>\n                        </Collapse>\n                        {/* <ListItem button>\n                            <ListItemIcon> <InfoIcon /> </ListItemIcon>\n                            <ListItemText primary={t('menu:about')} />\n                        </ListItem> */}\n                    </List>\n                    <Divider />\n                    <List\n                        className={classes.closeList}\n                        role=\"presentation\"\n                    >\n                        <ListItem\n                            button\n                            onClick={closeMenu}\n                        >\n                            <ListItemIcon className={classes.closeButton}><ExitToAppRoundedIcon /></ListItemIcon>\n                            <ListItemText primary={t('menu:close')}/>\n                        </ListItem>\n                    </List>\n                </div>\n            </Drawer>\n        </div>\n    );\n}\n","import React, { useEffect, useState } from 'react';\n\nimport {\n    CircularProgress,\n    Divider,\n    List,\n    ListItem,\n    ListItemText,\n    ListSubheader,\n    makeStyles,\n    Typography\n} from '@material-ui/core';\n\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\nimport GitHubIcon from '@material-ui/icons/GitHub';\n\nimport { DEFAULT_PERSONAL_DATA } from 'code/data/personal/defaults/default-personal-data';\nimport { Personal as PersonalInterface } from 'code/data/personal/interface/personal';\n\nimport '../../../code/helpers/translation/i18n/config';\nimport { useTranslation } from 'react-i18next';\nimport { languageNotifier } from '../../../code/helpers/translation/i18n/notifier';\nimport { personalRepository } from 'code/repository';\n\nconst useStyles: (props?: any) => Record<\n'roundimage' |\n'presentation' |\n'website' |\n'websitesList' |\n'skills' |\n'list', string>\n    = makeStyles({\n        roundimage: {\n            borderRadius: '50%',\n        },\n        presentation: {\n            textAlign: 'center',\n            paddingTop: '50px',\n            width: '100%',\n            maxWidth: '600px',\n            margin: 'auto',\n        },\n        website: {\n\n        },\n        websitesList: {\n            width: '250px',\n            margin: 'auto',\n        },\n        skills: {\n            width: '250px',\n            margin: 'auto',\n            textAlign: 'left',\n        },\n        list: {\n            width: '250px',\n            margin: 'auto',\n        },\n    });\n\ninterface layoutState {\n    personalData: PersonalInterface;\n    loading: boolean;\n};\n\nfunction PersonalPresentation({personalData}: {personalData: PersonalInterface}) {\n    const { t, i18n } = useTranslation(['personal']);\n\n    const style:  Record<\n        'roundimage' |\n        'presentation' |\n        'website' |\n        'websitesList' |\n        'skills' |\n        'list', string\n    > = useStyles();\n\n    const gotoLink = (link: string) => () => {\n        window.open(link, '_blank');\n    };\n\n    function onLanguageChange(language: string): void {\n        i18n.changeLanguage(language);\n    }\n\n    languageNotifier.addNotification(onLanguageChange);\n\n    return (\n        <div className={style.presentation}>\n            <Typography\n                variant=\"h2\"\n                component=\"h1\"\n            >\n                {personalData.name}\n            </Typography>\n\n            <img\n                className={style.roundimage}\n                src={personalData.img}\n            />\n\n            <Typography\n                variant=\"h4\"\n                component=\"h2\"\n            >\n                {personalData.role}\n            </Typography>\n\n            <p>{personalData.city} - {personalData.state} - {personalData.country}</p>\n            <Divider />\n            <Typography\n                variant=\"h4\"\n                component=\"h1\"\n            >\n                {t('personal:description')}\n            </Typography>\n\n            <Typography\n                component=\"p\"\n            >\n                {personalData.description}\n            </Typography>\n            <Divider />\n            <div className={style.skills}>\n                <Typography\n                    variant=\"h4\"\n                    component=\"h1\"\n                >\n                    {t('personal:skills')}\n                </Typography>\n                <List\n                    className={style.list}\n                >\n                    {personalData.skills.map((value: string, index: number): JSX.Element => {\n                        return(\n                            <ListItem button key={index}>\n                                <ListItemText primary={value}/>\n                            </ListItem>\n                        );\n                    })}\n                </List>\n            </div>\n            <Divider />\n            <div className={style.skills}>\n                <Typography\n                    variant=\"h4\"\n                    component=\"h1\"\n                >\n                    {t('personal:languages')}\n                </Typography>\n\n                <List\n                    className={style.list}\n                >\n                    {personalData.languages.map((value: string, index: number): JSX.Element => {\n                        return(\n                            <ListItem button key={index}>\n                                <ListItemText primary={value}/>\n                            </ListItem>\n                        );\n                    })}\n                </List>\n            </div>\n            <Divider />\n            <div className={style.website}>\n                <List\n                    className={style.websitesList}\n                    subheader={<ListSubheader>{t('personal:websites')}</ListSubheader>}\n                >\n                    <ListItem\n                        onClick={gotoLink(personalData.websites.linkedin)}\n                        button\n                    >\n                        <ListItemText primary=\"Linkedin\"/>\n                        <LinkedInIcon />\n                    </ListItem>\n                    <ListItem\n                        onClick={gotoLink(personalData.websites.github)}\n                        button\n                    >\n                        <ListItemText primary=\"Github\"/>\n                        <GitHubIcon />\n                    </ListItem>\n                    <ListItem\n                        onClick={gotoLink(personalData.websites.blog)}\n                        button\n                    >\n                        <ListItemText primary=\"Blog\"/>\n                    </ListItem>\n                    <ListItem\n                        onClick={gotoLink(personalData.websites.gitlab)}\n                        button\n                    >\n                        <ListItemText primary=\"Gitlab\"/>\n                    </ListItem>\n                    <ListItem\n                        onClick={gotoLink(personalData.websites.bitbucket)}\n                        button\n                    >\n                        <ListItemText primary=\"Bitbucket\"/>\n                    </ListItem>\n                    <ListItem\n                        onClick={gotoLink(personalData.websites.personal)}\n                        button\n                    >\n                        <ListItemText primary=\"Website\"/>\n                    </ListItem>\n                </List>\n            </div>\n        </div>\n    )\n}\n\nexport function Personal() {\n    const [state, setState] = useState<layoutState>({\n        personalData: DEFAULT_PERSONAL_DATA,\n        loading: true,\n    });\n\n    useEffect((): void => {\n        personalRepository.addNotification(onDataChange);\n        personalRepository.updateData();\n    }, [])\n\n    function onDataChange(personalData: PersonalInterface) {\n        setState({\n            personalData: personalData,\n            loading: false,\n        });\n    }\n\n\n    const formStates = [\n        <PersonalPresentation personalData={state.personalData} />,\n        <CircularProgress/>,\n    ]\n\n    return (\n        <div className=\"personal\">\n            { formStates[state.loading ? 1 : 0] }\n        </div>\n    );\n}\n","import { Box } from '@material-ui/core';\nimport React from 'react';\nimport { SiteMenu } from './menu/SiteMenu';\n\nimport { Personal } from './personal/Personal';\n\nexport function Main() {\n    return (\n        <Box>\n            <SiteMenu/>\n            <Personal/>\n        </Box>\n    );\n}\n","import React from 'react';\n\nimport { Main } from './main/Main';\nimport '../code/helpers/translation/i18n/config';\nimport { useTranslation } from 'react-i18next';\n\nexport function Core() {\n    const { t } = useTranslation(['core']);\n\n    document.title = t('core:title');\n\n    return (\n        <>\n            <Main />\n        </>\n    );\n}\n","import 'fontsource-roboto';\nimport { Core } from 'components/core';\n\nfunction App() {\n  return (\n    <Core />\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}